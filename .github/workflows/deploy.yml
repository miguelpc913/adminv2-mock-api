name: Deploy to Amazon ECS

on:
  push:
    branches: [ "infra" ]
    paths:
      - admin/**
      - .github/workflows/**
          
env:
  AWS_REGION: eu-west-1                   
  ECS_SERVICE: admin-mock-api      
  CONTAINER_NAME: admin-mock-api
  ECS_CLUSTER: qa
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json
  DOCKERFILE: dev.Dockerfile

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::227320912480:role/github-actions-role
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: "true"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REPO: ${{ vars.ECR_REPO_NAME }}
        IMAGE_TAG: develop
        DOCKFILE: ${{ env.DOCKERFILE }}
      run: |
        docker build -f $DOCKFILE -t "$ECR_REPO:$IMAGE_TAG" .
        docker push "$ECR_REPO:$IMAGE_TAG"
        echo "image=$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
            ENVIRONMENT=dev
            MYSQL_ROOT_PASSWORD=root
            MYSQL_DATABASE=admin_dev
            MYSQL_USER=admin
            MYSQL_PASSWORD=admin
            MYSQL_PORT=3306
            MYSQL_HOST=adminmockapi-db.ccwi8akjz0qr.eu-west-1.rds.amazonaws.com
            air_wd=/app
        docker-labels: |
            SERVICE=api
            VERSION=1.2

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
